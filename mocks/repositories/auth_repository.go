// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../../mocks/repositories/auth_repository.go -package=mockrepositories -exclude_interfaces=UsersRepository
//

// Package mockrepositories is a generated GoMock package.
package mockrepositories

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "github.com/DKhorkov/hmtm-sso/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthRepository) ChangePassword(ctx context.Context, userID uint64, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, userID, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthRepositoryMockRecorder) ChangePassword(ctx, userID, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthRepository)(nil).ChangePassword), ctx, userID, newPassword)
}

// CreateRefreshToken mocks base method.
func (m *MockAuthRepository) CreateRefreshToken(ctx context.Context, userID uint64, refreshToken string, ttl time.Duration) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRefreshToken", ctx, userID, refreshToken, ttl)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRefreshToken indicates an expected call of CreateRefreshToken.
func (mr *MockAuthRepositoryMockRecorder) CreateRefreshToken(ctx, userID, refreshToken, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRefreshToken", reflect.TypeOf((*MockAuthRepository)(nil).CreateRefreshToken), ctx, userID, refreshToken, ttl)
}

// ExpireRefreshToken mocks base method.
func (m *MockAuthRepository) ExpireRefreshToken(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpireRefreshToken indicates an expected call of ExpireRefreshToken.
func (mr *MockAuthRepositoryMockRecorder) ExpireRefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireRefreshToken", reflect.TypeOf((*MockAuthRepository)(nil).ExpireRefreshToken), ctx, refreshToken)
}

// ForgetPassword mocks base method.
func (m *MockAuthRepository) ForgetPassword(ctx context.Context, userID uint64, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgetPassword", ctx, userID, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgetPassword indicates an expected call of ForgetPassword.
func (mr *MockAuthRepositoryMockRecorder) ForgetPassword(ctx, userID, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgetPassword", reflect.TypeOf((*MockAuthRepository)(nil).ForgetPassword), ctx, userID, newPassword)
}

// GetRefreshTokenByUserID mocks base method.
func (m *MockAuthRepository) GetRefreshTokenByUserID(ctx context.Context, userID uint64) (*entities.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokenByUserID", ctx, userID)
	ret0, _ := ret[0].(*entities.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokenByUserID indicates an expected call of GetRefreshTokenByUserID.
func (mr *MockAuthRepositoryMockRecorder) GetRefreshTokenByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokenByUserID", reflect.TypeOf((*MockAuthRepository)(nil).GetRefreshTokenByUserID), ctx, userID)
}

// RegisterUser mocks base method.
func (m *MockAuthRepository) RegisterUser(ctx context.Context, userData entities.RegisterUserDTO) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, userData)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthRepositoryMockRecorder) RegisterUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthRepository)(nil).RegisterUser), ctx, userData)
}

// VerifyUserEmail mocks base method.
func (m *MockAuthRepository) VerifyUserEmail(ctx context.Context, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmail", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockAuthRepositoryMockRecorder) VerifyUserEmail(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockAuthRepository)(nil).VerifyUserEmail), ctx, userID)
}
